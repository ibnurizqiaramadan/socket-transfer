function addToConsole(e){Console_.append(`${moment(+new Date).format("YYYY.MM.DD-H:mm:ss")} - ${e}\n`),Console_.scrollTop(Console_[0].scrollHeight-Console_.height())}function appendServerIp(e){const r=$(`label[for="server-${e.replace(/\./g,"")}"]`);if(r.length>0){return}let t=`\n        <div class="form-check">\n            <input class="form-check-input" type="checkbox" value="${e}" \n            id="server-${e.replace(/\./g,"")}">\n            <label class="form-check-label text-danger" \n            for="server-${e.replace(/\./g,"")}">\n                ${e}\n            </label>\n        </div>\n    `;$("#server-list").append(t),$('input[id*="server-"]').unbind().change(function(e){const r=$('input[id*="server-"]:checked');let t="";for(let e=0;e<r.length;e++){const n=r[e];t+=`${$(n).val()},`}const n=$("#ip"),o=$("#ipd"),s=$("#ipssh");n.val(t.substring(0,t.length-1)),o.val(t.substring(0,t.length-1)),s.val(t.substring(0,t.length-1))})}function pingServer(){pingInterval=setInterval(()=>{serverList.forEach(e=>{socket.emit("ping",{ip:e.ip,time:+new Date})})},1e3)}function loadServerList(){socket.emit("getAllRooms"),pingServer()}const socketUrl=document.querySelector('meta[name="socket-url"]').getAttribute("content");let serverList=[];const serverListContainer=document.getElementById("server-list"),btnUpload=document.getElementById("btn-upload"),btnDownlod=document.getElementById("btn-download"),term=new Terminal({cursorBlink:"block"});var curr_line="",entries=[],currPos=0,pos=0;term.open(document.getElementById("terminal")),term.prompt=(()=>{term.write("\n\r"+curr_line+"\r\n[32mssh> [37m")}),term.write("Hello"),term.prompt(),term.on("key",function(e,r){const t=!(r.altKey||r.altGraphKey||r.ctrlKey||r.metaKey||37===r.keyCode&&term.buffer.cursorX<6);if(13===r.keyCode){if(0!=curr_line.replace(/^\s+|\s+$/g,"").length){entries.push(curr_line),currPos=entries.length-1;const e=document.getElementById("ipssh");socket.emit("sshCommand",{ip:e.value,command:curr_line}),term.write("\r\n"),console.log(curr_line)}else{term.write("\n[2K\r[32mssh> [37m")}curr_line=""}else if(8===r.keyCode){term.buffer.cursorX>5&&(curr_line=curr_line.slice(0,term.buffer.cursorX-6)+curr_line.slice(term.buffer.cursorX-5),pos=curr_line.length-term.buffer.cursorX+6,term.write("[2K\r[32mssh> [37m"+curr_line),term.write("[".concat(pos.toString()).concat("D")),5!=term.buffer.cursorX&&term.buffer.cursorX!=curr_line.length+6||term.write("[1C"))}else if(38===r.keyCode){entries.length>0&&(currPos>0&&(currPos-=1),curr_line=entries[currPos],term.write("[2K\r[32mssh> [37m"+curr_line))}else if(40===r.keyCode){currPos+=1,currPos===entries.length||0===entries.length?(currPos-=1,curr_line="",term.write("[2K\r[32mssh> [37m")):(curr_line=entries[currPos],term.write("[2K\r[32mssh> [37m"+curr_line))}else if(t&&!(39===r.keyCode&&term.buffer.cursorX>curr_line.length+4)){if(37!=r.keyCode&&39!=r.keyCode){var n=r.key;9==r.keyCode&&(n="    "),pos=curr_line.length-term.buffer.cursorX+4,curr_line=[curr_line.slice(0,term.buffer.cursorX-5),n,curr_line.slice(term.buffer.cursorX-5)].join(""),term.write("[2K\r[32mssh> [37m"+curr_line),term.write("[".concat(pos.toString()).concat("D"))}else{term.write(e)}}}),term.on("paste",function(e){curr_line+=e,term.write(curr_line)});const socket=io(socketUrl);let pingInterval;const Console_=$("#console");btnUpload.addEventListener("click",()=>{const e=document.getElementById("file"),r=document.getElementById("pathsrc"),t=document.getElementById("path"),n=document.getElementById("ip");""==r.value.trim()?e.files.length>0&&Object.values(e.files).forEach(e=>{const r={name:e.name,size:e.size,ip:n.value,path:t.value};socket.emit("upload",{metaData:r,file:e},e=>{console.log(e)})}):$.ajax({url:"/upload-path",method:"get",data:{src:r.value.trim(),des:t.value.trim(),ip:n.value},success:function(e){console.log(e),addToConsole(`Uploading ${e.files.length} files to ${n.value}`)}})}),btnDownlod.addEventListener("click",()=>{const e=document.getElementById("pathsrcd"),r=document.getElementById("pathd"),t=document.getElementById("ipd"),n={ip:t.value,pathdes:r.value,pathsrc:e.value};socket.emit("download",{metaData:n})}),socket.on("connect",()=>{console.log(`Socket connected to ${socketUrl}`),clearInterval(pingInterval),loadServerList()}),socket.on("sendAllRooms",e=>{serverList=e,serverListContainer.innerHTML="",e.forEach(e=>{appendServerIp(e.ip)})}),socket.on("device-disconnected",e=>{const r=$(`label[for="server-${e.ip.replace(/\./g,"")}"]`);r.removeClass("text-success").addClass("text-danger").text(e.ip),$(`#server-${e.ip.replace(/\./g,"")}`).prop("disabled",!0).prop("checked",!1),addToConsole(`${e.ip} has disconnected`)}),socket.on("device-connected",e=>{serverList.push(e),appendServerIp(e.ip),$(`#server-${e.ip.replace(/\./g,"")}`).prop("disabled",!1),addToConsole(`${e.ip} has connected`)}),socket.on("serverResponded",e=>{let r=Math.floor((e.time-e.pingTime)/100);const t=$(`label[for="server-${e.ip.replace(/\./g,"")}"]`);t.removeClass("text-danger").addClass("text-success").text(`${e.ip} - ${r}ms`)}),socket.on("uploadFailed",e=>{console.log(e);const r=e.data;addToConsole(`❌ Destination : ${r.ip} File : ${r.fileName} Failed : ${e.message}`)}),socket.on("uploadSuccess",e=>{console.log(e);const r=e.data;addToConsole(`✔ Destination : ${r.ip} File : ${r.fileName}`)}),socket.on("downloadSuccess",e=>{console.log(e),addToConsole(`✔ Destination : ${e.filePath}`)}),socket.on("getFileCountDownload",e=>{console.log(e),addToConsole(`Downloading ${e.count} files from ${e.metaData.ip}`)}),socket.on("sshCommandGetResult",e=>{term.write(e.result.replace(/\n/g,"\r\n"))}),socket.on("sshCommandFinish",e=>{term.prompt()});